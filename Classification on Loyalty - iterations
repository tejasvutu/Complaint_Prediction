##-- Running on cleaned up ADS for Loyalty ---#
# removed : non complaining legs, random seat statuses, p2muc blowup #

library(data.table)
library(dplyr)
library(lubridate)


library(h2o)
h2o.init()


name <- as.data.frame(names(ads_loy_clean))


loy <- fread("/data/IDS/loyalty_final.csv")
loy_skim <- loy %>% select (madeup_cust_id,brth_yr)

ads_loy_clean2 <- left_join(ads_loy_clean, loy_skim, by = "madeup_cust_id")
ads_loy_clean2$age <- 2019 - ads_loy_clean2$brth_yr



unique(ads_loy_clean2$upgrade_cd)
unique(ads_loy_clean2$downgrade_ind)
unique(ads_loy_clean2$cbn_cd)
unique(ads_loy_clean2$mbsp_pgm_tier_cd
)
  



check <- ads_loy_clean2 %>% group_by(case_flag, cbn_cd) %>% 
  summarise(counts =n())

check <- ads_loy_clean2 %>% group_by(case_flag, flt_dvrn_ct) %>% 
  summarise(counts =n())


## non - cancelled loyalty records

ads2 <- ads %>% filter(cxn_ct == 0)
fwrite(ads2,"/data/IDS/noncanx_loy.csv",row.names = F)

## missing values check <- <- <- <- <- 

ads <- ads_loy_clean2
rm(ads_loy_clean2)

unique(ads2$ml_dc_cd)
check <- ads %>% distinct(dly_div_cd, dly_typ_cd)

summary(ads2$dot_mlg_ct)

check <- ads2 %>% filter(is.na(dot_mlg_ct))


## filtering for cases where there are all times --- 

ads3 <- ads %>% filter (schd_dprt_gts!="" & schd_arr_gts!= "" & 
                           actl_dprt_gts!="" & actl_arr_gts!= "" &
                           schd_dprt_lts!="" & schd_arr_lts!= "" & 
                           actl_dprt_lts!="" & actl_arr_lts!= "")


summary(ads3$actl_enrt_mnt_ct)
check <- ads3 %>% filter(is.na(actl_enrt_mnt_ct))
ads4 <- ads3 %>% filter(is.na(actl_enrt_mnt_ct) == F)
unique(ads4$gndr_typ_cd)
summary(ads4$mbp_avbl_mi_ct)
summary(ads4$mbsp_dur)
summary(ads4$perc_occu)
summary(ads4$arr_dly)
summary(ads4$dprt_dly)
summary(ads4$blk_dly)
summary(ads4$tot_taxi)
summary(ads4$brth_yr)
unique(ads4$upgrade_cd)
unique(ads4$downgrade_ind)
summary(ads4$pax_ct)


check <- ads4 %>% filter(is.na(pax_ct))


## missing treatments ---
ads$dly_fctr_cd[ads$dly_fctr_cd == ""] <- "Unknown"
ads4$gndr_typ_cd[ads4$gndr_typ_cd == ""] <- "Unknown"
ads4$age[is.na(ads4$age)] <- 49.48

ads5 <- ads4 %>% filter(is.na(pax_ct) == F)



################################################################################################
#----------------------------------------------------------------------------------------------#
################################################################################################


save.image("~/loy_clean_20190523.RData")



library(h2o)
h2o.init()

## train and test 

ads_feed <- ads5 %>% select(ownr_crr_cd,	cur_seat_status_cd,	dom_intl_cd,	dly_typ_cd,	dly_fctr_cd,	ml_dc_cd,	dot_mlg_ct,	
                            actl_enrt_mnt_ct,	gndr_typ_cd,	mbp_avbl_mi_ct,	mbsp_dur,	perc_occu,	arr_dly,	dprt_dly,	blk_dly,
                            tot_taxi,	age,	upgrade_cd,	downgrade_ind,	cbn_cd,	flt_dvrn_ct,	pax_ct,	mbsp_pgm_tier_cd,case_flag)

ads5 <- fread("/data/IDS/ads5_20190523.csv")

rm(ads5)

ads_feed <- ads_feed %>% mutate_if(is.character,as.factor)

ads_feed$case_flag <- as.factor(ads_feed$case_flag)
str(ads_feed$case_flag)


## undersampling at 20% of majority class : overall class balance is -- 25%:75%
set.seed(1234)
train_ind <- sample(1:nrow(ads_feed), 0.9*nrow(ads_feed))
train <- ads_feed[train_ind,]
test <- ads_feed[-train_ind,]


train.h2o <- as.h2o(train)
test.h2o <- as.h2o(test)



x.indep <- c(1:23)
y.indep <- 24

balancing_fact <- c(0.2,1)

model_rf <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 50, mtries = 3, max_depth = 6, seed = 1234,
                             balance_classes = T, class_sampling_factors = balancing_fact)

imp_var <- h2o.varimp(model_rf)
h2o.performance(model_rf)



predict.rforest <- as.data.frame(h2o.predict(model_rf, test.h2o))
new_test <- cbind(test,predict.rforest)
new_test <- new_test %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking <- new_test %>% group_by(flagging) %>% summarise(counts = n())



##Re trying with 30% sampling rate for majority class


set.seed(1234)

balancing_fact <- c(0.3,1)

model_rf2 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 50, mtries = 3, max_depth = 6, seed = 1234,
                             balance_classes = T, class_sampling_factors = balancing_fact)

imp_var2 <- h2o.varimp(model_rf2)
h2o.performance(model_rf2)



predict.rforest2 <- as.data.frame(h2o.predict(model_rf2, test.h2o))
new_test2 <- cbind(test,predict.rforest2)
new_test2<- new_test2 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking2 <- new_test2 %>% group_by(flagging) %>% summarise(counts = n())




## Trying with Oversampling ------



set.seed(1234)

balancing_fact <- c(1,3)

model_rf3 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 50, mtries = 3, max_depth = 6, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var3 <- h2o.varimp(model_rf3)
h2o.performance(model_rf3)



predict.rforest3 <- as.data.frame(h2o.predict(model_rf3, test.h2o))
new_test3 <- cbind(test,predict.rforest3)
new_test3<- new_test3 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking3 <- new_test3 %>% group_by(flagging) %>% summarise(counts = n())



## combining both -- idea : better recall from undersampling and better overall accuracy from oversampling --??


set.seed(1234)

balancing_fact <- c(0.5,3)

model_rf4 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 50, mtries = 3, max_depth = 6, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var4 <- h2o.varimp(model_rf4)
h2o.performance(model_rf4)



predict.rforest4 <- as.data.frame(h2o.predict(model_rf4, test.h2o))
new_test4 <- cbind(test,predict.rforest4)
new_test4<- new_test4 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking4 <- new_test4 %>% group_by(flagging) %>% summarise(counts = n())



## Recall is decent -- need to improve accuracy -- 
## try to over fit a bit : increase number of trees and depth



set.seed(1234)

balancing_fact <- c(0.5,3)

model_rf5 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 3, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var5 <- h2o.varimp(model_rf5)
h2o.performance(model_rf5)



predict.rforest5 <- as.data.frame(h2o.predict(model_rf5, test.h2o))
new_test5 <- cbind(test,predict.rforest5)
new_test5<- new_test5 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking5 <- new_test5 %>% group_by(flagging) %>% summarise(counts = n())


## "mtries" set to 5 ---



set.seed(1234)

balancing_fact <- c(0.5,3)

model_rf6 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 5, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var6 <- h2o.varimp(model_rf6)
h2o.performance(model_rf6)



predict.rforest6 <- as.data.frame(h2o.predict(model_rf6, test.h2o))
new_test6 <- cbind(test,predict.rforest6)
new_test6 <- new_test6 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking6 <- new_test6 %>% group_by(flagging) %>% summarise(counts = n())






## "mtries" set to 5 and less severe undersampling of the majority class and reduced oversampling of minority---



set.seed(1234)

balancing_fact <- c(0.75,2.5)

model_rf7 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 5, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var7 <- h2o.varimp(model_rf7)
h2o.performance(model_rf7)



predict.rforest7 <- as.data.frame(h2o.predict(model_rf7, test.h2o))
new_test7 <- cbind(test,predict.rforest7)
new_test7 <- new_test7 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking7 <- new_test7 %>% group_by(flagging) %>% summarise(counts = n())



## "mtries" set to 5 and less severe undersampling of the majority class -- increased mtries to 6



set.seed(1234)

balancing_fact <- c(0.75,3)

model_rf8 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 6, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var8 <- h2o.varimp(model_rf8)
h2o.performance(model_rf8)



predict.rforest8 <- as.data.frame(h2o.predict(model_rf8, test.h2o))
new_test8 <- cbind(test,predict.rforest8)
new_test8 <- new_test8 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking8 <- new_test8 %>% group_by(flagging) %>% summarise(counts = n())


## iteration 9 -- removing arr and dprt delay variables --- and reverting to iteration 5


set.seed(1234)

balancing_fact <- c(0.5,3)

x.indep <- c(1:12,15:23)
y.indep <- 24

model_rf9 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 6, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var9 <- h2o.varimp(model_rf9)
h2o.performance(model_rf9)



predict.rforest9 <- as.data.frame(h2o.predict(model_rf9, test.h2o))
new_test9 <- cbind(test,predict.rforest9)
new_test9 <- new_test9 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking9 <- new_test9 %>% group_by(flagging) %>% summarise(counts = n())


## iteration 10 ----- bucketing delay variables----

ads_feed <- ads_feed %>% mutate(dprt_dly_flag = ifelse(dprt_dly<=0, "No Delay", ifelse(dprt_dly>0 & dprt_dly<=30, "0-30min",
                                                                                  ifelse(dprt_dly>30 & dprt_dly<=120, "30min-2hr",
                                                                                         ifelse(dprt_dly>120 & dprt_dly<=300,"2-5hr",">5hr")))))

ads_feed <- ads_feed %>% mutate(arr_dly_flag = ifelse(arr_dly<=0, "No Delay", ifelse(arr_dly>0 & arr_dly<=30, "0-30min",
                                                                                     ifelse(arr_dly>30 & arr_dly<=120, "30min-2hr",
                                                                                            ifelse(arr_dly>120 & arr_dly<=300,"2-5hr",">5hr")))))




set.seed(1234)

balancing_fact <- c(0.75,2.5)

model_rf7 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 5, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var7 <- h2o.varimp(model_rf7)
h2o.performance(model_rf7)



predict.rforest7 <- as.data.frame(h2o.predict(model_rf7, test.h2o))
new_test7 <- cbind(test,predict.rforest7)
new_test7 <- new_test7 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking7 <- new_test7 %>% group_by(flagging) %>% summarise(counts = n())



## "mtries" set to 5 and less severe undersampling of the majority class -- increased mtries to 6



set.seed(1234)

balancing_fact <- c(0.75,3)

model_rf8 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 6, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var8 <- h2o.varimp(model_rf8)
h2o.performance(model_rf8)



predict.rforest8 <- as.data.frame(h2o.predict(model_rf8, test.h2o))
new_test8 <- cbind(test,predict.rforest8)
new_test8 <- new_test8 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking8 <- new_test8 %>% group_by(flagging) %>% summarise(counts = n())



## iteration 9
set.seed(1234)
 
 balancing_fact <- c(0.5,3)
 
 x.indep <- c(1:12,15:23)
 y.indep <- 24
 model_rf9 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, ntrees = 100, mtries = 6, max_depth = 9, seed = 1234,
                                +                               balance_classes = T, class_sampling_factors = balancing_fact)


## iteration 10 -- removing arr and dprt delay variables --- and reverting to iteration 5


 ## iteration 10 ----- bucketing delay variables----
 
 ads_feed <- ads_feed %>% mutate(dprt_dly_flag = ifelse(dprt_dly<=0, "No Delay", ifelse(dprt_dly>0 & dprt_dly<=30, "0-30min",
                                                                                        ifelse(dprt_dly>30 & dprt_dly<=120, "30min-2hr",
                                                                                               ifelse(dprt_dly>120 & dprt_dly<=300,"2-5hr",">5hr")))))
 
 ads_feed <- ads_feed %>% mutate(arr_dly_flag = ifelse(arr_dly<=0, "No Delay", ifelse(arr_dly>0 & arr_dly<=30, "0-30min",
                                                                                      ifelse(arr_dly>30 & arr_dly<=120, "30min-2hr",
                                                                                             ifelse(arr_dly>120 & arr_dly<=300,"2-5hr",">5hr")))))
 
ads_feed$arr_dly_flag <- as.factor(ads_feed$arr_dly_flag)
ads_feed$dprt_dly_flag <- as.factor(ads_feed$dprt_dly_flag)
 
train_10 <- ads_feed[train_ind,]
test_10 <- ads_feed[-train_ind,]


train10.h2o <- as.h2o(train_10)
test10.h2o <- as.h2o(test_10)
name10 <- as.data.frame(names(ads_feed))
 
set.seed(1234)

balancing_fact <- c(0.70,3)

x.indep <- c(1,2,3,5:10,14,16:22,24,25)
y.indep <- 23

model_rf10 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train10.h2o, ntrees = 100, mtries = 6, max_depth = 9, seed = 1234,
                              balance_classes = T, class_sampling_factors = balancing_fact)

imp_var10 <- h2o.varimp(model_rf10)
h2o.performance(model_rf10)



predict.rforest10 <- as.data.frame(h2o.predict(model_rf10, test10.h2o))
new_test10 <- cbind(test_10,predict.rforest10)
new_test10 <- new_test10 %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking10 <- new_test10 %>% group_by(flagging) %>% summarise(counts = n())






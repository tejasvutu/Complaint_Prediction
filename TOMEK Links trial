##### TOMEK Links Trial ######

library(data.table)
library(dplyr)
library(lubridate)

library(unbalanced)

str(ads_feed_new)
ads_feed_new$time_bucket <- as.factor(ads_feed_new$time_bucket)


## creating a couple of features ----
ads_feed_new <- ads_feed_new %>% mutate(dprt_dly_flag = ifelse(dprt_dly<=0, "No Delay", ifelse(dprt_dly>0 & dprt_dly<=30, "0-30min",
                                                                                       ifelse(dprt_dly>30 & dprt_dly<=120, "31min-2hr",
                                                                                              ifelse(dprt_dly>120 & dprt_dly<=300,"2-5hr",">5hr")))))

ads_feed_new <- ads_feed_new %>% mutate(arr_dly_flag = ifelse(arr_dly<=0, "No Delay", ifelse(arr_dly>0 & arr_dly<=30, "0-30min",
                                                                                     ifelse(arr_dly>30 & arr_dly<=120, "31min-2hr",
                                                                                            ifelse(arr_dly>120 & arr_dly<=300,"2-5hr",">5hr")))))

ads_feed_new <- ads_feed_new %>% mutate(age_buck = ifelse(age<=30, "Upto 30", ifelse(age <=45, "31 to 45", ifelse(age<= 60 , "46 to 60", ">60"))))

ads_feed_new <- ads_feed_new %>% mutate_if(is.character,as.factor)
str(ads_feed_new)




name2 <- as.data.frame(names(ads_feed_new))


## TOMEK Links ----
output <- ads_feed_new$case_flag
input <- ads_feed_new[,c(7,8,10:17,22) ]


data<-ubTomek(X=input, Y= output)
newData<-cbind(data$X, data$Y)


str(newData)
removed_ppl <- as.data.frame(data$id.rm)
str(removed_ppl)
names(removed_ppl) <- "rownames"


##removing the idiots from ads_feed_new----

ads_feed_new$rownames <- as.integer(  rownames(ads_feed_new))
str(ads_feed_new$rownames)

## QC -- checking if the removed rows belong only to the maj class
check <- inner_join(ads_feed_new, removed_ppl, by = "rownames")
check$case_flag <- as.character(check$case_flag)
unique(check$case_flag)

ade_feed_new2 <- anti_join(ads_feed_new, removed_ppl, by = "rownames")



## stratified undersampling of the majority class after Tomek links removal----

min <- ade_feed_new2 %>% filter(case_flag == 1)
maj <- ade_feed_new2 %>% filter(case_flag == 0)



library(splitstackshape)

prop.table(table(maj$gndr_typ_cd))
prop.table(table(maj$dprt_dly_flag))
prop.table(table(maj$arr_dly_flag))
prop.table(table(maj$age_buck))
maj_strat <- stratified(maj, c("gndr_typ_cd","dprt_dly_flag","arr_dly_flag", "age_buck")  , 1200000/nrow(maj))


prop.table(table(maj_strat$gndr_typ_cd))
prop.table(table(maj_strat$dprt_dly_flag))
prop.table(table(maj_strat$arr_dly_flag))
prop.table(table(maj_strat$age_buck))


## shuffling and reassigning row numbers ----
new_bal_ads_tomek <- rbind(min, maj_strat)
new_bal_ads_tomek <- new_bal_ads_tomek[sample(nrow(new_bal_ads_tomek)),]
rownames(new_bal_ads_tomek) <- 1:nrow(new_bal_ads_tomek)

str(new_bal_ads_tomek)



## RF iteration ----
set.seed(1234)

train_ind <- sample(1:nrow(new_bal_ads_tomek), 0.9*nrow(new_bal_ads_tomek))

train <- new_bal_ads_tomek[train_ind,]
test <- new_bal_ads_tomek[-train_ind,]

library(h2o)
h2o.init()

train.h2o <- as.h2o(train)
test.h2o <- as.h2o(test)


x.indep <- c(1:12,15,16,18:23,25:28)
y.indep <- 24


model_rf <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, 
                             ntrees = 50, mtries = 5, max_depth = 6, seed = 1234)


imp_var <- h2o.varimp(model_rf)
h2o.performance(model_rf)


predict.rforest <- as.data.frame(h2o.predict(model_rf, test.h2o))
new_test <- cbind(test,predict.rforest)
new_test <- new_test %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking <- new_test %>% group_by(flagging) %>% summarise(counts = n())



## multiple TOMEK iterations is one attempt ----


## start with ade_feed_new2



output <- ade_feed_new2$case_flag
input <- ade_feed_new2[,c(7,8,10:17,22) ]


data2<-ubTomek(X=input, Y= output)
newData2<-cbind(data2$X, data2$Y)

str(newData)
removed_ppl2 <- as.data.frame(data2$id.rm)
str(removed_ppl)
names(removed_ppl2) <- "rownames"


##removing the idiots from ads_feed_new

ade_feed_new2$rownames <- as.integer(  rownames(ade_feed_new2))
str(ade_feed_new2$rownames)

## QC -- checking if the removed rows belong only to the maj class
check <- inner_join(ads_feed_new, removed_ppl, by = "rownames")
check$case_flag <- as.character(check$case_flag)
unique(check$case_flag)

ade_feed_new3 <- anti_join(ade_feed_new2, removed_ppl2, by = "rownames")

## stratified undersampling on this again

min2 <- ade_feed_new3 %>% filter(case_flag == 1)
maj2 <- ade_feed_new3 %>% filter(case_flag == 0)



library(splitstackshape)

prop.table(table(maj$gndr_typ_cd))
prop.table(table(maj$dprt_dly_flag))
prop.table(table(maj$arr_dly_flag))
prop.table(table(maj$age_buck))
maj_strat2 <- stratified(maj2, c("gndr_typ_cd","dprt_dly_flag","arr_dly_flag", "age_buck")  , 1200000/nrow(maj2))


prop.table(table(maj_strat$gndr_typ_cd))
prop.table(table(maj_strat$dprt_dly_flag))
prop.table(table(maj_strat$arr_dly_flag))
prop.table(table(maj_strat$age_buck))



new_bal_ads_tomek2 <- rbind(min2, maj_strat2)
new_bal_ads_tomek2 <- new_bal_ads_tomek2[sample(nrow(new_bal_ads_tomek2)),]
rownames(new_bal_ads_tomek2) <- 1:nrow(new_bal_ads_tomek2)



## trying RF the second time ----

set.seed(1234)

train_ind2 <- sample(1:nrow(new_bal_ads_tomek2), 0.9*nrow(new_bal_ads_tomek2))

train2 <- new_bal_ads_tomek2[train_ind2,]
test2 <- new_bal_ads_tomek2[-train_ind2,]

library(h2o)
h2o.init()

train.h2o <- as.h2o(train2)
test.h2o <- as.h2o(test2)


x.indep <- c(1:12,15,16,18:23,25:28)
y.indep <- 24


model_rf2 <- h2o.randomForest(y=y.indep, x=x.indep, training_frame = train.h2o, 
                             ntrees = 50, mtries = 5, max_depth = 6, seed = 1234)


imp_var2 <- h2o.varimp(model_rf2)
h2o.performance(model_rf2)


predict.rforest <- as.data.frame(h2o.predict(model_rf, test.h2o))
new_test <- cbind(test,predict.rforest)
new_test <- new_test %>% mutate(flagging = ifelse(case_flag == 1 & predict==1, "TP",ifelse(case_flag == 0 & predict==0,"TN",ifelse(case_flag == 0 & predict==1,"FP","FN"))))
checking <- new_test %>% group_by(flagging) %>% summarise(counts = n())


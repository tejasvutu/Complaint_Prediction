#ads <- fread("/data/IDS/ads_20190516.csv")

## recreating the Delays ADS-----
rm(list = setdiff(ls(),"ads_cleaned_up"))
ads <- ads_cleaned_up
rm(ads_cleaned_up)

## selecting only non-cancelled flights!! initial filter
ads <- ads %>% filter(cxn_ct == 0)
#filtering for loyalty members only
ads <- ads %>% filter(is.na(madeup_cust_id) == F)## no of rows remaining -- 7471538!

str(ads$schd_arr_gts)

## cleaning upo being done again because of data issue --- fwrite is unreliable?
ads$schd_arr_gts <- as.POSIXct(ads$schd_arr_gts, format = "%Y-%m-%d %H:%M",tz = "GMT")
ads$actl_arr_gts <- as.POSIXct(ads$actl_arr_gts, format = "%Y-%m-%d %H:%M",tz = "GMT")

ads$schd_dprt_gts <- as.POSIXct(ads$schd_dprt_gts, format = "%Y-%m-%d %H:%M",tz = "GMT")
ads$actl_dprt_gts <- as.POSIXct(ads$actl_dprt_gts, format = "%Y-%m-%d %H:%M",tz = "GMT")


## creating delay variables and other time variables --
ads <- ads %>%  mutate(arr_dly = as.numeric( difftime(actl_arr_gts,schd_arr_gts,units = 'mins')))
ads <- ads %>%  mutate(dprt_dly = as.numeric( difftime(actl_dprt_gts,schd_dprt_gts,units = 'mins')))

ads <- ads %>% mutate(blk_dly = (actl_blk_tm_mnt_ct) - (schd_blk_tm_mnt_ct), 
                      tot_taxi = actl_taxi_in_mnt_ct+actl_taxi_out_mnt_ct)




ads$arr_dly[is.na(ads$arr_dly)] <- 0
ads$dprt_dly[is.na(ads$arr_dly)] <- 0
ads$tot_pax_ct[is.na(ads$tot_pax_ct)] <- 0
ads$pax_ct[is.na(ads$pax_ct)] <- 0
ads$enp_pax_ct[is.na(ads$enp_pax_ct)] <- 0

name <- as.data.frame( names(ads))


## features for occupancy and aircraft change--
ads <- ads %>% mutate(perc_occu = enp_pax_ct/pax_ct,
                      ac_change = ifelse(schd_ac_typ_cd!=actl_ac_typ_cd, 1, 0))

ads <- ads %>% mutate(age = 2019 - brth_yr)
mean(ads$age)

ads$age[is.na(ads$age)] <- 49.39378
ads$perc_occu[is.na(ads$perc_occu)] <- 0

ads <- ads %>% filter()
temp <- head(ads)


max(ads$pax_ct)
str(ads$pax_ct)



chk <- ads %>% distinct(pnr_recloc,pnr_create_dt,flt_orig_dt,upgrade_cd,downgrade_ind,schd_orig_stn_cd, schd_dest_stn_cd,flt_nb,
                        given_name_nbr,surname_nbr,seat_assignment,   ownr_crr_cd,
                        cur_seat_status_cd,cbn_cd,itin_seg_nbr,first_leg_dep_dt,sfdc_case_id,madeup_cust_id,
                        brth_yr,gndr_typ_cd,mbsp_pgm_cd,lftm_crdd_fmi_ct,tot_mbsp_pgm_mi_ct,lftm_spnt_rev_usd_amt,mbsp_pgm_tier_cd,
                        ml_dc_cd,dom_intl_cd,dly_div_cd,dly_typ_cd,
                        dly_fctr_cd,flt_dvrn_ct,arr_dly,dprt_dly,blk_dly,tot_taxi,perc_occu,ac_change,sfdc_acct_id,
                        case_nb,case_fdbk_nm, perc_occu, age
)





mean(ads$arr_dly)
str(chk$sfdc_case_id)
chk <- chk %>% mutate(case_flag = ifelse(sfdc_case_id == "", 0 ,1))

## H2O model starts -------- ISOLATION FOREST !!
name2 <- as.data.frame(names(chk))
library(h2o)
h2o.init()
getwd()

set.seed(1234)
train_ind <- sample(1:nrow(chk), 0.9*nrow(chk))

train.h2o <- as.h2o(chk[train_ind,])
test.h2o <- as.h2o(chk[-train_ind,])

xindep <- c(4,5,14,15,20:37,41)

model <- h2o.isolationForest(training_frame=train.h2o,
                             sample_rate = 0.3,
                             max_depth = 5,
                             ntrees = 100,x = xindep)
score <- h2o.predict(model, test.h2o)
score

result_pred <- score$predict
ln_pred <- h2o.predict_leaf_node_assignment(model, test.h2o)
chk2 <- as.data.frame(ln_pred)
